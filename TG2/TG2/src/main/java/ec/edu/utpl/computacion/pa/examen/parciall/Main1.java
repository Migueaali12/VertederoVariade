package ec.edu.utpl.computacion.pa.examen.parciall;import javax.persistence.EntityManager;import javax.persistence.EntityManagerFactory;import javax.persistence.EntityTransaction;import javax.persistence.Persistence;import java.sql.*;import java.util.ArrayList;import java.util.List;public class Main1 {    private static final String URL = "jdbc:h2:~/ExamenParcial";    private static final String USER = "sa";    private static final String PASSWORD = "";    private static final String PERSISTENCE_UNIT_NAME = "pu-pa";    private static EntityManagerFactory factory;    public static void main(String[] args) throws InterruptedException {        factory = Persistence.createEntityManagerFactory(PERSISTENCE_UNIT_NAME);        generarAsambleistas();        //crearAsambleistasJPA();        crearHilosVotacion();        generarResumenVotacion();        factory.close();    }    private static void generarAsambleistas() {        try (Connection connection = DriverManager.getConnection(URL, USER, PASSWORD)) {            String sql = "INSERT INTO asambleista (nombre, tipo) VALUES (?, ?)";            List<Asambleista> asambleistas = new ArrayList<>();            asambleistas.add(new Asambleista("Nacional 1", "Nacional"));            asambleistas.add(new Asambleista("Nacional 2", "Nacional"));            asambleistas.add(new Asambleista("Provincial 1", "Provincial"));            asambleistas.add(new Asambleista("Provincial 2", "Provincial"));            asambleistas.add(new Asambleista("Extranjero 1", "Extranjero"));            asambleistas.add(new Asambleista("Extranjero 2", "Extranjero"));            PreparedStatement statement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);            for (Asambleista asambleista : asambleistas) {                statement.setString(1, asambleista.getNombre());                statement.setString(2, asambleista.getTipo());                statement.executeUpdate();                ResultSet generatedKeys = statement.getGeneratedKeys();                if (generatedKeys.next()) {                    int id = generatedKeys.getInt(1);                    asambleista.setId(id);                }            }        } catch (SQLException e) {            e.printStackTrace();        }    }    private static void crearAsambleistasJPA() {        EntityManager em = factory.createEntityManager();        EntityTransaction transaction = em.getTransaction();        transaction.begin();        try {            Asambleista asambleista6 = new Asambleista("Asambleista 6", "Provincial");            em.persist(asambleista6);            Asambleista asambleista7 = new Asambleista("Asambleista 7", "Nacional");            em.persist(asambleista7);            Asambleista asambleista8 = new Asambleista("Asambleista 8", "Provincial");            em.persist(asambleista8);            Asambleista asambleista9 = new Asambleista("Asambleista 9", "Nacional");            em.persist(asambleista9);            Asambleista asambleista10 = new Asambleista("Asambleista 10", "Extranjero");            em.persist(asambleista10);            transaction.commit();        } catch (Exception e) {            transaction.rollback();            e.printStackTrace();        }        em.close();    }    /*        private static void crearHilosVotacion() throws InterruptedException {            EntityManager em = factory.createEntityManager();            List<Asambleista> asambleistas = em.createQuery("SELECT a FROM Asambleista a", Asambleista.class).getResultList();            em.close();            List<Thread> threads = new ArrayList<>();            for (Asambleista asambleista : asambleistas) {                Thread hiloVotacion = new Thread(new VotacionThread(asambleista, factory.createEntityManager()));                threads.add(hiloVotacion);                hiloVotacion.start();            }            for (Thread thread : threads) {                thread.join();            }        }    */    private static void crearHilosVotacion() {        EntityManager em = factory.createEntityManager();        List<Asambleista> asambleistas = em.createQuery("SELECT a FROM Asambleista a", Asambleista.class).getResultList();        RegistroVotos registroVotos = new RegistroVotos(em); // Objeto compartido        List<Thread> hilos = new ArrayList<>();        for (Asambleista asambleista : asambleistas) {            Thread hiloVotacion = new Thread(() -> {                VotacionThread votacionThread = new VotacionThread(asambleista, registroVotos);                votacionThread.run();            });            hilos.add(hiloVotacion);            hiloVotacion.start();        }        for (Thread thread : hilos) {            try {                thread.join();            } catch (InterruptedException e) {                e.printStackTrace();            }        }        em.close();    }    private static void generarResumenVotacion() {        EntityManager em = factory.createEntityManager();        long totalSi = em.createQuery("SELECT COUNT(v) FROM Voto v WHERE v.opcion = 'si'", Long.class).getSingleResult();        long totalNo = em.createQuery("SELECT COUNT(v) FROM Voto v WHERE v.opcion = 'no'", Long.class).getSingleResult();        long totalAbstencion = em.createQuery("SELECT COUNT(v) FROM Voto v WHERE v.opcion = 'abstencion'", Long.class).getSingleResult();        long totalNacionalesSi = em.createQuery("SELECT COUNT(v) FROM Voto v WHERE v.asambleista.tipo = 'Nacional' AND v.opcion = 'si'", Long.class).getSingleResult();        long totalNacionalesNo = em.createQuery("SELECT COUNT(v) FROM Voto v WHERE v.asambleista.tipo = 'Nacional' AND v.opcion = 'no'", Long.class).getSingleResult();        long totalNacionalesAbstencion = em.createQuery("SELECT COUNT(v) FROM Voto v WHERE v.asambleista.tipo = 'Nacional' AND v.opcion = 'abstencion'", Long.class).getSingleResult();        long totalProvincialesSi = em.createQuery("SELECT COUNT(v) FROM Voto v WHERE v.asambleista.tipo = 'Provincial' AND v.opcion = 'si'", Long.class).getSingleResult();        long totalProvincialesNo = em.createQuery("SELECT COUNT(v) FROM Voto v WHERE v.asambleista.tipo = 'Provincial' AND v.opcion = 'no'", Long.class).getSingleResult();        long totalProvincialesAbstencion = em.createQuery("SELECT COUNT(v) FROM Voto v WHERE v.asambleista.tipo = 'Provincial' AND v.opcion = 'abstencion'", Long.class).getSingleResult();        long totalExtranjerosSi = em.createQuery("SELECT COUNT(v) FROM Voto v WHERE v.asambleista.tipo = 'Extranjero' AND v.opcion = 'si'", Long.class).getSingleResult();        long totalExtranjerosNo = em.createQuery("SELECT COUNT(v) FROM Voto v WHERE v.asambleista.tipo = 'Extranjero' AND v.opcion = 'no'", Long.class).getSingleResult();        long totalExtranjerosAbstencion = em.createQuery("SELECT COUNT(v) FROM Voto v WHERE v.asambleista.tipo = 'Extranjero' AND v.opcion = 'abstencion'", Long.class).getSingleResult();        List<Asambleista> asambleistas = em.createQuery("SELECT a FROM Asambleista a", Asambleista.class).getResultList();        em.close();        System.out.println("Resumen de Votación");        System.out.println("-------------------");        System.out.println("VOTO\t\tCANTIDAD");        System.out.println("SI\t\t\t" + totalSi);        System.out.println("NO\t\t\t" + totalNo);        System.out.println("ABSTENCIÓN\t" + totalAbstencion);        System.out.println("TOTAL\t\t" + asambleistas.size());        System.out.println("\n\t\t\t\tSI\t\tNO\t\tABSTENCIÓN");        System.out.println("NACIONALES\t\t" + totalNacionalesSi + "\t\t" + totalNacionalesNo + "\t\t\t" + totalNacionalesAbstencion);        System.out.println("PROVINCIALES\t" + totalProvincialesSi + "\t\t" + totalProvincialesNo + "\t\t\t" + totalProvincialesAbstencion);        System.out.println("EXTRANJEROS\t\t" + totalExtranjerosSi + "\t\t" + totalExtranjerosNo + "\t\t\t" + totalExtranjerosAbstencion);    }}